# handlers/orders/add_addresses_order.py

import datetime
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from middlewares.role_middleware import RoleMiddleware
from states.order_states import OrderCreationStates
from db.setup import get_db_session
from db.models import Client, Address
from sqlalchemy.future import select
from utils.text_formatter import escape_markdown_v2, bold, italic

router = Router()

router.message.middleware(RoleMiddleware(required_roles=['admin', 'manager']))
router.callback_query.middleware(RoleMiddleware(required_roles=['admin', 'manager']))

async def send_address_options(callback: CallbackQuery, state: FSMContext, client_id: int, bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–ª–∏ –Ω–æ–≤—ã–π.
    –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –æ–¥–∏–Ω - –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–∞.
    """
    async for session in get_db_session():
        addresses_stmt = select(Address).where(Address.client_id == client_id)
        addresses_result = await session.execute(addresses_stmt)
        addresses = addresses_result.scalars().all()

        if len(addresses) == 1:
            # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –∞–¥—Ä–µ—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            single_address = addresses[0]
            await state.update_data(address_id=single_address.address_id, address_text=single_address.address_text)
            
            await callback.message.edit_text(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –∞–¥—Ä–µ—Å: {bold(escape_markdown_v2(single_address.address_text))}\n"
                                             "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑:",
                                             parse_mode="MarkdownV2")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            from handlers.orders.add_product_order import send_product_options
            # –í—ã–∑—ã–≤–∞–µ–º send_product_options, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–π —Ç–µ–∫—É—â–∏–π callback –∏ state, –∞ —Ç–∞–∫–∂–µ bot
            await send_product_options(callback, state, bot) # –ü–µ—Ä–µ–¥–∞–µ–º 'bot'
            
            await callback.answer() # –í–∞–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback_query
            return # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–¥–µ—Å—å

        # ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ
        buttons = []
        if addresses:
            for addr in addresses:
                button_text = escape_markdown_v2(addr.address_text)
                buttons.append([InlineKeyboardButton(text=button_text, callback_data=f"select_address_{addr.address_id}")])
            buttons.append([InlineKeyboardButton(text="üÜï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å", callback_data="add_new_address")])
        else:
            # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ—Ç –≤–æ–æ–±—â–µ
            await callback.message.edit_text("–£ —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.\n"
                                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
                                             parse_mode="MarkdownV2")
            await state.set_state(OrderCreationStates.waiting_for_new_address_input)
            await callback.answer()
            return # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –æ–∂–∏–¥–∞—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞

        buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–ª–∏–µ–Ω—Ç–∞", callback_data="back_to_client_selection")])
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order_creation")])

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        if isinstance(callback, CallbackQuery):
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:", reply_markup=keyboard, parse_mode="MarkdownV2")
        else:
            await bot.send_message(callback.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:", reply_markup=keyboard, parse_mode="MarkdownV2")

        await state.set_state(OrderCreationStates.waiting_for_address_selection)
    await callback.answer() # –í–∞–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback_query


@router.callback_query(OrderCreationStates.waiting_for_address_selection, F.data.startswith("select_address_"))
async def process_address_selection(callback: CallbackQuery, state: FSMContext, bot: Bot): # –î–æ–±–∞–≤–∏–ª bot
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥—Ä–µ—Å–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –∞–¥—Ä–µ—Å–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–æ–≤.
    """
    address_id = int(callback.data.split("_")[-1])
    async for session in get_db_session():
        address_stmt = select(Address).where(Address.address_id == address_id)
        address_result = await session.execute(address_stmt)
        address = address_result.scalar_one_or_none()

        if address:
            await state.update_data(address_id=address.address_id, address_text=address.address_text)
            await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω –∞–¥—Ä–µ—Å: {bold(escape_markdown_v2(address.address_text))}\n"
                                             "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑:",
                                             parse_mode="MarkdownV2")
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            from handlers.orders.add_product_order import send_product_options
            await send_product_options(callback, state, bot) # –ü–µ—Ä–µ–¥–∞–µ–º 'bot'
        else:
            await callback.answer("–û—à–∏–±–∫–∞: –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞
            data = await state.get_data()
            client_id = data.get('client_id')
            if client_id:
                await send_address_options(callback, state, client_id, bot) # –ü–µ—Ä–µ–¥–∞–µ–º 'bot'
            else:
                await callback.message.edit_text("–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω. –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /new_order.")
                await state.clear()
    await callback.answer()


@router.callback_query(OrderCreationStates.waiting_for_address_selection, F.data == "add_new_address")
async def cmd_add_new_address(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞.
    """
    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderCreationStates.waiting_for_new_address_input)
    await callback.answer()

@router.message(OrderCreationStates.waiting_for_new_address_input, F.text)
async def process_new_address_input(message: Message, state: FSMContext, bot: Bot): # –î–æ–±–∞–≤–∏–ª bot
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–æ–≤.
    """
    new_address_text = message.text.strip()
    if not new_address_text:
        await message.answer("–ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å:")
        return

    data = await state.get_data()
    client_id = data.get('client_id')

    if not client_id:
        await message.answer("–û—à–∏–±–∫–∞: –ö–ª–∏–µ–Ω—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /new_order.")
        await state.clear()
        return

    async for session in get_db_session():
        try:
            new_address = Address(
                client_id=client_id,
                address_text=new_address_text
            )
            session.add(new_address)
            await session.flush() # –ü–æ–ª—É—á–∞–µ–º address_id
            await session.commit()

            await state.update_data(address_id=new_address.address_id, address_text=new_address.address_text)
            await message.answer(f"–ù–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω: {bold(escape_markdown_v2(new_address_text))}\n"
                                 "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑:",
                                 parse_mode="MarkdownV2")
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            from handlers.orders.add_product_order import send_product_options
            # –í—ã–∑—ã–≤–∞–µ–º send_product_options, –ø–µ—Ä–µ–¥–∞–≤–∞—è message.bot
            await send_product_options(message, state, bot) # –ü–µ—Ä–µ–¥–∞–µ–º 'bot'
        except Exception as e:
            await session.rollback()
            await message.answer(f"{bold('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞:')}\n"
                                 f"{escape_markdown_v2(str(e))}\n"
                                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                 parse_mode="MarkdownV2")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞: {e}")


@router.callback_query(F.data == "back_to_client_selection")
async def back_to_client_selection(callback: CallbackQuery, state: FSMContext, bot: Bot): # –î–æ–±–∞–≤–∏–ª bot
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –∫–ª–∏–µ–Ω—Ç–∞.
    """
    from handlers.orders.add_client_order import cmd_new_order # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
    # cmd_new_order –æ–∂–∏–¥–∞–µ—Ç Message, state, user_role. –ó–¥–µ—Å—å —É –Ω–∞—Å callback.message
    # user_role –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ state.data, —Ç.–∫. middleware —É–∂–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª
    data = await state.get_data()
    user_role = data.get('user_role', 'client') # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ FSM-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'client'
    
    await cmd_new_order(callback.message, state, user_role)
    await callback.answer()