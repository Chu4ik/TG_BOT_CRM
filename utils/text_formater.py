# utils/text_formatter.py

import re
from aiogram.utils.text import bold, italic, code, pre, link, spoiler, underline, strikethrough # Импортируем все необходимые хелперы

def escape_markdown_v2(text: str) -> str:
    """
    Экранирует специальные символы MarkdownV2 в тексте, который не будет
    дополнительно форматироваться с помощью хелперов aiogram.utils.text.

    Этот метод используется для "сырого" текста (например, из БД или ввода пользователя),
    который НЕ должен быть жирным, курсивом и т.д., но может содержать
    символы, которые MarkdownV2 интерпретирует как форматирующие.
    """
    if not isinstance(text, str):
        text = str(text) # Убедимся, что работаем со строкой

    # Символы, которые нужно экранировать в MarkdownV2.
    # Обратный слеш '\' должен быть экранирован первым.
    # Остальные символы экранируются, если они не являются частью форматирования.
    # aiogram.utils.text хелперы _уже_ экранируют свой внутренний текст,
    # поэтому эта функция нужна для текста, который ПЕРЕДАЕТСЯ КАК ЕСТЬ
    # в сообщение, но может содержать эти символы.
    special_chars = r'_*[]()~`>#+-=|{}.!'

    # Экранируем обратный слеш первым, чтобы он не влиял на последующие экранирования
    text = text.replace('\\', '\\\\')

    # Экранируем остальные специальные символы
    for char in special_chars:
        text = text.replace(char, f'\\{char}')

    return text

# Ниже можно определить дополнительные удобные функции-обертки,
# если хотите, чтобы они всегда применяли escape_markdown_v2 к своему содержимому
# перед применением форматирования. Однако, как было сказано, aiogram.utils.text
# хелперы уже делают это по умолчанию.

# Пример использования хелперов aiogram.utils.text:
# text_message = f"Это {bold('жирный текст')} и {italic('курсив')}. " \
#                f"А вот ссылка: {link('Google', 'https://www.google.com')}. " \
#                f"Сырые данные из БД: {escape_markdown_v2('Попкорн "З вершковим маслом" 90г')}"