# services/order_editing_service.py

import datetime
import logging
from decimal import Decimal

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from db.setup import get_db_session
from db.models import Order, Client, Employee, Address, OrderLine, Product
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload
from utils.text_formatter import escape_markdown_v2, bold, italic
from states.order_states import OrderEditingStates


async def process_my_order_selection(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    # await bot(callback.answer()) # <--- –£–î–ê–õ–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£! (–û–Ω–∞ –≤—ã–∑–≤–∞–ª–∞ –æ—à–∏–±–∫—É)
    
    order_id = int(callback.data.split("_")[-1])
    await state.update_data(editing_order_id=order_id)

    async for session in get_db_session():
        try:
            order_stmt = select(Order).where(Order.order_id == order_id).options(
                selectinload(Order.client),
                selectinload(Order.employee),
                selectinload(Order.address),
                selectinload(Order.order_lines).selectinload(OrderLine.product)
            )
            order_result = await session.execute(order_stmt)
            order = order_result.scalar_one_or_none()

            if not order:
                await bot.send_message(callback.message.chat.id, bold("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω."))
                await state.clear()
                return

            client_name = order.client.name if order.client else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            employee_name = order.employee.name if order.employee else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            address_text = order.address.address_text if order.address else '–ù–µ —É–∫–∞–∑–∞–Ω'


            summary_parts = [
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ ‚Ññ{order.order_id} ({order.status})\n\n",

                f"–ö–ª–∏–µ–Ω—Ç: {client_name}\n",
                f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee_name}\n",
                f"–ê–¥—Ä–µ—Å: {address_text}\n",
                f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order.order_date.strftime('%d.%m.%Y %H:%M')}\n",
                f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_date.strftime('%d.%m.%Y') if order.delivery_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n",
                f"–°—É–ºma: {round(order.total_amount, 2)} –≥—Ä–Ω\n\n",
            ]

            if order.invoice_number:
                summary_parts.append(f"–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π: {order.invoice_number}\n")

            summary_parts.append("\n--- –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ ---\n")

            if order.order_lines:
                sorted_order_lines = sorted(order.order_lines, key=lambda x: x.order_line_id)

                for idx, line in enumerate(sorted_order_lines):
                    product_name = line.product.name if line.product else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"
                    quantity = str(line.quantity)
                    unit_price = str(round(line.unit_price, 2))
                    line_total = str(round(line.line_total, 2))

                    summary_parts.append(
                        f"{idx+1}. {product_name}\n"
                        f"   –ö–æ–ª-–≤–æ: {quantity} —à—Ç. | –¶–µ–Ω–∞: {unit_price} –≥—Ä–Ω | –°—É–º–º–∞: {line_total} –≥—Ä–Ω\n"
                    )
            else:
                summary_parts.append("–í —ç—Ç–æ–º –∑–∞–∫–∞–∑–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.\n")

            summary_parts.append("\n--- –ò—Ç–æ–≥–æ ---\n")
            summary_parts.append(f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {round(order.total_amount, 2)} –≥—Ä–Ω\n")
            summary_parts.append(f"–û–ø–ª–∞—á–µ–Ω–æ: {round(order.amount_paid, 2)} –≥—Ä–Ω\n")
            remaining_amount = order.total_amount - order.amount_paid
            summary_parts.append(f"–û—Å—Ç–∞—Ç–æ–∫ –∫ –æ–ø–ª–∞—Ç–µ: {round(remaining_amount, 2)} –≥—Ä–Ω\n")


            full_summary_text = "".join(summary_parts)

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞", callback_data=f"change_quantity_start_{order_id}")],
                [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∑–∞–∫–∞–∑–∞", callback_data=f"delete_product_start_{order_id}")],
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑", callback_data=f"add_product_start_{order_id}")],
                [InlineKeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data=f"change_date_start_{order_id}")],
                [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"delete_order_start_{order_id}")],
                [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ (–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é)", callback_data="done_editing_order")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order_editing")]
            ])

            await bot.send_message( # <--- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ
                chat_id=callback.message.chat.id,
                text=full_summary_text,
                reply_markup=keyboard
            )
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ delete_message
            if callback.message: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                try:
                    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
                except Exception as del_e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {del_e}")


            await state.set_state(OrderEditingStates.my_order_menu)

        except Exception as e:
            await session.rollback()
            await bot.send_message(callback.message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}\n")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞ {order_id}: {e}", exc_info=True)
            await state.clear()
        # finally: # <--- –£–î–ê–õ–ò–¢–¨: callback.answer() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –≤—ã–∑—ã–≤–∞—é—â–∏–º —Ö—ç–Ω–¥–ª–µ—Ä–æ–º
        #     await bot(callback.answer())


async def return_to_order_menu(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏/–¥–∞—Ç—ã.
    """
    # await bot(callback.answer()) # <--- –£–î–ê–õ–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£! (–û–Ω–∞ –≤—ã–∑–≤–∞–ª–∞ –æ—à–∏–±–∫—É)

    data = await state.get_data()
    order_id = data.get('editing_order_id')

    if not order_id:
        await bot.send_message(callback.message.chat.id, "–û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ /my_orders —Å–Ω–æ–≤–∞.")
        await state.clear()
        await bot(callback.answer()) # –ó–¥–µ—Å—å answer –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥
        return

    # –í—ã–∑—ã–≤–∞–µ–º process_my_order_selection, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–ø–µ—Ä—å –û–¢–ü–†–ê–í–õ–Ø–ï–¢ –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ
    temp_callback_data = f"edit_order_select_{order_id}"
    temp_callback = CallbackQuery(
        id=f"temp_{datetime.datetime.now().timestamp()}",
        from_user=callback.from_user,
        chat_instance=callback.chat_instance,
        message=callback.message,
        data=temp_callback_data
    )
    await process_my_order_selection(temp_callback, state, bot)
    # –ó–¥–µ—Å—å callback.answer() –ù–ï –í–´–ó–´–í–ê–ï–¢–°–Ø, —Ç–∞–∫ –∫–∞–∫ process_my_order_selection
    # —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ implicit answer –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –Ω–∏–º.
    # –ï—Å–ª–∏ —ç—Ç–æ CallbackQuery, –∏ –º—ã –Ω–µ edit_text, —Ç–æ answer() –≤—Å–µ –µ—â–µ –Ω—É–∂–µ–Ω.
    # –î–∞–≤–∞–π—Ç–µ —è–≤–Ω–æ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ callback.answer() –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "–≤–∏—Å—è—â–∏—Ö" –∑–∞–ø—Ä–æ—Å–æ–≤.
    await bot(callback.answer()) # <--- –ò–°–ü–†–ê–í–õ–ï–ù–û, –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç callback_query